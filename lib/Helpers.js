// Generated by CoffeeScript 1.7.1
(function() {
  var Helpers;

  Helpers = (function() {
    function Helpers() {}

    Helpers.dirName = function(path) {
      var num;
      num = path.lastIndexOf('/');
      return path.substr(0, num);
    };

    Helpers.normalizePath = function(path) {
      var part, parts, prev, result, _i, _len;
      parts = path.split('/');
      result = [];
      prev = null;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (part === '.' || part === '') {
          continue;
        } else if (part === '..' && prev) {
          result.pop();
        } else {
          result.push(part);
        }
        prev = part;
      }
      return '/' + result.join('/');
    };

    Helpers.arrayIndexOf = function(array, search) {
      var element, i, _i, _len;
      if (typeof Array.prototype.indexOf !== 'undefined') {
        return array.indexOf(search);
      }
      if (array.length === 0) {
        return -1;
      }
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        element = array[i];
        if (element === search) {
          return i;
        }
      }
      return -1;
    };

    Helpers.clone = function(obj) {
      var key, result, value, _i, _len, _ref, _ref1, _type;
      _type = Object.prototype.toString;
      switch (_type.call(obj)) {
        case '[object Array]':
          result = [];
          for (key = _i = 0, _len = obj.length; _i < _len; key = ++_i) {
            value = obj[key];
            if (value !== null && ((_ref = _type.call(value)) === '[object Array]' || _ref === '[object Object]')) {
              result[key] = Helpers.clone(value);
            } else {
              result[key] = value;
            }
          }
          break;
        case '[object Object]':
          result = {};
          for (key in obj) {
            value = obj[key];
            if (value !== null && ((_ref1 = _type.call(value)) === '[object Array]' || _ref1 === '[object Object]')) {
              result[key] = Helpers.clone(value);
            } else {
              result[key] = value;
            }
          }
          break;
        default:
          return obj;
      }
      return result;
    };

    return Helpers;

  })();

  module.exports = Helpers;

}).call(this);
