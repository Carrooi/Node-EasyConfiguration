// Generated by CoffeeScript 1.7.1
(function() {
  var EasyConfiguration, Extension, Helpers, callsite, isWindow, merge, path;

  merge = require('recursive-merge');

  Extension = require('./Extension');

  Helpers = require('./Helpers');

  isWindow = typeof window !== 'undefined';

  if (!isWindow) {
    callsite = require('callsite');
    path = require('path');
  }

  EasyConfiguration = (function() {
    EasyConfiguration.PARAMETER_REGEXP = /%([a-zA-Z.-_]+)%/g;

    EasyConfiguration.prototype.files = null;

    EasyConfiguration.prototype.reserved = null;

    EasyConfiguration.prototype.extensions = null;

    EasyConfiguration.prototype.includes = null;

    EasyConfiguration.prototype._parameters = null;

    EasyConfiguration.prototype.parameters = null;

    EasyConfiguration.prototype.data = null;

    function EasyConfiguration(_path, section) {
      if (_path == null) {
        _path = null;
      }
      if (section == null) {
        section = 'production';
      }
      this.files = {};
      this.reserved = ['includes', 'parameters', 'common'];
      this.extensions = {};
      this.includes = {};
      this._parameters = {};
      this.parameters = {};
      if (_path !== null) {
        this.addConfig(_path, section);
      }
    }

    EasyConfiguration.prototype.addConfig = function(_path, section) {
      var previous, stack;
      if (section == null) {
        section = 'production';
      }
      if (_path[0] === '.' && isWindow) {
        throw new Error('Relative paths to config files are not supported in browser.');
      }
      if (_path[0] === '.') {
        stack = callsite();
        previous = stack[1].getFileName() === __filename ? stack[2] : stack[1];
        _path = path.join(path.dirname(previous.getFileName()), _path);
      }
      if (Helpers.arrayIndexOf(this.reserved, section) === -1) {
        this.reserved.push(section);
      }
      return this.files[_path] = section;
    };

    EasyConfiguration.prototype.addSection = function(name) {
      return this.addExtension(name, new Extension);
    };

    EasyConfiguration.prototype.addExtension = function(name, extension) {
      if (Helpers.arrayIndexOf(this.reserved, name) !== -1) {
        throw new Error('Extension\'s name ' + name + ' is reserved.');
      }
      extension.configurator = this;
      this.extensions[name] = extension;
      return this.extensions[name];
    };

    EasyConfiguration.prototype.removeExtension = function(name) {
      if (typeof this.extensions[name] === 'undefined') {
        throw new Error('Extension with name ' + name + ' was not found.');
      }
      delete this.extensions[name];
      this.invalidate();
      return this;
    };

    EasyConfiguration.prototype.invalidate = function() {
      this.data = null;
      return this;
    };

    EasyConfiguration.prototype.load = function() {
      var config, data, section, _path, _ref;
      if (this.data === null) {
        config = {};
        _ref = this.files;
        for (_path in _ref) {
          section = _ref[_path];
          config = this.merge(this.loadConfig(_path, section), config);
        }
        data = this.parse(config);
        this.includes = data.files;
        this.parameters = data.parameters;
        this.data = data.sections;
      }
      return this.data;
    };

    EasyConfiguration.prototype.loadConfig = function(file, section) {
      var data, include, _data, _i, _len, _path, _ref;
      if (section == null) {
        section = 'production';
      }
      data = require(file);
      data = Helpers.clone(data, false);
      if (typeof data[section] !== 'undefined' || typeof data.common !== 'undefined') {
        if (typeof data.common !== 'undefined') {
          _data = data.common;
          if (typeof data[section] !== 'undefined') {
            _data = this.merge(data[section], _data);
          }
        } else {
          _data = data[section];
        }
        data = _data;
      }
      if (typeof data.includes !== 'undefined') {
        _ref = data.includes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          include = _ref[_i];
          _path = Helpers.normalizePath(Helpers.dirName(file) + '/' + include);
          data = this.merge(data, this.loadConfig(_path));
        }
      }
      return data;
    };

    EasyConfiguration.prototype.parse = function(data) {
      var name, result, section, sections, _ref;
      result = {
        files: [],
        parameters: {},
        sections: {}
      };
      if (typeof data.includes !== 'undefined') {
        result.files = data.includes;
      }
      if (typeof data.parameters !== 'undefined') {
        this._parameters = data.parameters;
        result.parameters = this.expandParameters(data.parameters);
      }
      _ref = this.extensions;
      for (name in _ref) {
        section = _ref[name];
        if (typeof data[name] === 'undefined') {
          data[name] = {};
        }
      }
      sections = data;
      if (typeof sections.parameters !== 'undefined') {
        delete sections.parameters;
      }
      if (typeof sections.includes !== 'undefined') {
        delete sections.includes;
      }
      for (name in sections) {
        section = sections[name];
        if (sections.hasOwnProperty(name) && (name !== '__proto__')) {
          if (typeof this.extensions[name] === 'undefined') {
            throw new Error('Found section ' + name + ' but there is no coresponding extension.');
          }
          this.extensions[name].data = section;
          section = this.extensions[name].loadConfiguration();
          section = this.expandParameters(section);
          section = this.extensions[name].afterCompile(section);
          result.sections[name] = section;
        }
      }
      return result;
    };

    EasyConfiguration.prototype.expandParameters = function(parameters) {
      var name, param, parse, type, _i, _len, _type;
      _type = Object.prototype.toString;
      parse = (function(_this) {
        return function(name, param) {
          switch (_type.call(param)) {
            case '[object String]':
              return parameters[name] = param.replace(EasyConfiguration.PARAMETER_REGEXP, function(match, variable) {
                var result, _ref;
                result = _this._getParameter(variable, [name]);
                if ((_ref = _type.call(result)) === '[object Object]' || _ref === '[object Array]') {
                  result = '%' + variable + '%';
                }
                return result;
              });
            case '[object Object]':
            case '[object Array]':
              return parameters[name] = _this.expandParameters(param);
            default:
              return parameters[name] = param;
          }
        };
      })(this);
      type = _type.call(parameters);
      switch (type) {
        case '[object Object]':
          for (name in parameters) {
            param = parameters[name];
            parse(name, param);
          }
          break;
        case '[object Array]':
          for (name = _i = 0, _len = parameters.length; _i < _len; name = ++_i) {
            param = parameters[name];
            parse(name, param);
          }
          break;
        default:
          throw new Error("Can not parse " + type + " parameters.");
      }
      return parameters;
    };

    EasyConfiguration.prototype._getParameter = function(parameter, previous) {
      var actual, part, parts, s, _i, _len;
      if (previous == null) {
        previous = [];
      }
      parts = parameter.split('.');
      actual = this._parameters;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (typeof actual[part] === 'undefined') {
          throw new Error("Parameter " + parameter + " is not defined.");
        }
        actual = actual[part];
      }
      if (Helpers.arrayIndexOf(previous, parameter) !== -1) {
        s = previous.length === 1 ? '' : 's';
        previous = previous.join(', ');
        throw new Error("Found circular reference in parameter" + s + " " + previous + ".");
      }
      previous.push(parameter);
      if (typeof actual === 'string') {
        actual = actual.replace(EasyConfiguration.PARAMETER_REGEXP, (function(_this) {
          return function(match, param) {
            var result, _ref;
            result = _this._getParameter(param, previous);
            if ((_ref = Object.prototype.toString.call(result)) === '[object Object]' || _ref === '[object Array]') {
              result = '%' + param + '%';
            }
            return result;
          };
        })(this));
      }
      return actual;
    };

    EasyConfiguration.prototype.getParameter = function(parameter) {
      return this._getParameter(parameter);
    };

    EasyConfiguration.prototype.merge = function(left, right) {
      right = Helpers.clone(right);
      return merge(left, right);
    };

    return EasyConfiguration;

  })();

  module.exports = EasyConfiguration;

}).call(this);
