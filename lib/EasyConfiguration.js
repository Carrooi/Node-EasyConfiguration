// Generated by CoffeeScript 1.6.3
(function() {
  var EasyConfiguration, Extension, merge;

  merge = require('tea-merge');

  Extension = require('./Extension');

  EasyConfiguration = (function() {
    EasyConfiguration.prototype.fileName = null;

    EasyConfiguration.prototype.reserved = ['includes', 'parameters'];

    EasyConfiguration.prototype.extensions = {};

    EasyConfiguration.prototype._parameters = {};

    EasyConfiguration.prototype.parameters = {};

    EasyConfiguration.prototype.data = null;

    function EasyConfiguration(fileName) {
      this.fileName = fileName;
    }

    EasyConfiguration.prototype.addSection = function(name) {
      return this.addExtension(name, new Extension);
    };

    EasyConfiguration.prototype.addExtension = function(name, extension) {
      if (this.reserved.indexOf(name) !== -1) {
        throw new Error('Extension\'s name ' + name + ' is reserved.');
      }
      extension.configurator = this;
      this.extensions[name] = extension;
      return this.extensions[name];
    };

    EasyConfiguration.prototype.load = function() {
      var config;
      if (this.data === null) {
        config = this.loadConfig(this.fileName);
        this._parameters = config._parameters;
        this.parameters = config.parameters;
        config.data = this.parse(config.data);
        this.data = config.data;
      }
      return this.data;
    };

    EasyConfiguration.prototype.invalidate = function() {
      this.data = null;
      return this;
    };

    EasyConfiguration.prototype.loadConfig = function(file) {
      var data;
      data = {
        includes: [],
        _parameters: {},
        parameters: {},
        data: require(file)
      };
      if (typeof data.data.includes !== 'undefined') {
        data.includes = data.data.includes;
        delete data.data.includes;
      }
      if (typeof data.data.parameters !== 'undefined') {
        data.parameters = data.data.parameters;
        data._parameters = this.parseParameters(data.parameters);
        delete data.data.parameters;
      }
      data = this.prepare(data, file);
      return data;
    };

    EasyConfiguration.prototype.parseParameters = function(parameters, parent) {
      var name, result, value;
      if (parent == null) {
        parent = null;
      }
      result = {};
      if (Object.prototype.toString.call(parameters) === '[object Object]') {
        for (name in parameters) {
          value = parameters[name];
          result = this.merge(result, this.parseParameters(value, parent === null ? name : parent + '.' + name));
        }
      } else {
        result[parent] = parameters;
      }
      return result;
    };

    EasyConfiguration.prototype.prepare = function(data, parent) {
      var config, file, _i, _len, _ref;
      _ref = data.includes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        file = this.normalizePath(this.dirName(parent) + '/' + file);
        config = this.loadConfig(file);
        data.includes = this.merge(config.includes, data.includes);
        data.parameters = this.merge(config.parameters, data.parameters);
        data._parameters = this.merge(config._parameters, data._parameters);
        data.data = this.merge(config.data, data.data);
      }
      return data;
    };

    EasyConfiguration.prototype.parse = function(data) {
      var name, section, _ref;
      _ref = this.extensions;
      for (name in _ref) {
        section = _ref[name];
        if (typeof data[name] === 'undefined') {
          data[name] = {};
        }
      }
      for (name in data) {
        section = data[name];
        if (typeof this.extensions[name] === 'undefined') {
          throw new Error('Found section ' + name + ' but there is no coresponding extension.');
        }
        this.extensions[name].data = section;
        data[name] = this.extensions[name].loadConfiguration();
        data[name] = this.expand(data[name]);
      }
      return data;
    };

    EasyConfiguration.prototype.expand = function(data) {
      var i, value, _i, _len;
      switch (Object.prototype.toString.call(data)) {
        case '[object String]':
          data = this.expandParameter(data);
          break;
        case '[object Array]':
          for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
            value = data[i];
            data[i] = this.expand(value);
          }
          break;
        case '[object Object]':
          for (i in data) {
            value = data[i];
            data[i] = this.expand(value);
          }
      }
      return data;
    };

    EasyConfiguration.prototype.expandParameter = function(parameter) {
      var _this = this;
      parameter = parameter.replace(/%([a-zA-Z\.]+)%/g, function(match, param, offset, s) {
        if (typeof _this._parameters[param] === 'undefined') {
          throw new Error('Parameter ' + param + ' is not defined.');
        }
        return _this._parameters[param];
      });
      return parameter;
    };

    EasyConfiguration.prototype.merge = function(left, right) {
      return merge(left, right);
    };

    EasyConfiguration.prototype.dirName = function(path) {
      var num;
      num = path.lastIndexOf('/');
      return path.substr(0, num);
    };

    EasyConfiguration.prototype.normalizePath = function(path) {
      var part, parts, prev, result, _i, _len;
      parts = path.split('/');
      result = [];
      prev = null;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (part === '.' || part === '') {
          continue;
        } else if (part === '..' && prev) {
          result.pop();
        } else {
          result.push(part);
        }
        prev = part;
      }
      return '/' + result.join('/');
    };

    return EasyConfiguration;

  })();

  module.exports = EasyConfiguration;

}).call(this);
