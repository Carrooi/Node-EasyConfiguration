// Generated by CoffeeScript 1.6.3
(function() {
  var EasyConfiguration, Extension, configuration, expect, file, path;

  expect = require('chai').expect;

  path = require('path');

  EasyConfiguration = require('../../lib/EasyConfiguration');

  Extension = require('../../lib/Extension');

  file = path.resolve(__dirname + '/../data/config.json');

  configuration = null;

  describe('EasyConfiguration', function() {
    beforeEach(function() {
      return configuration = new EasyConfiguration(file);
    });
    describe('#expandParameters()', function() {
      return it('should return expanded and flattened parameters', function() {
        return expect(configuration.expandParameters({
          one: 'one',
          two: '%one%',
          three: {
            four: '%one%, %two%',
            five: '%three.four%'
          },
          six: '%seven%',
          seven: '%three.five%'
        })).to.be.eql({
          one: 'one',
          two: 'one',
          'three.four': 'one, one',
          'three.five': 'one, one',
          six: 'one, one',
          seven: 'one, one'
        });
      });
    });
    describe('#loadConfig()', function() {
      return it('should return parsed json file', function() {
        return expect(configuration.loadConfig(configuration.fileName)).to.be.eql({
          includes: ['./other.json'],
          parameters: {
            base: './www',
            paths: {
              lang: '%base%/lang',
              translator: '%paths.lang%/translator.js',
              images: '%base%/images',
              videos: '%base%/videos'
            },
            cached: ['%paths.translator%']
          }
        });
      });
    });
    describe('#parse()', function() {
      it('should return expanded configuration', function() {
        var data;
        data = configuration.loadConfig(configuration.fileName);
        return expect(configuration.parse(data)).to.be.eql({
          files: ["./other.json"],
          parameters: {
            base: './www',
            'paths.lang': './www/lang',
            'paths.translator': './www/lang/translator.js',
            'paths.images': './www/images',
            'paths.videos': './www/videos',
            cached: ['./www/lang/translator.js']
          },
          sections: {}
        });
      });
      it('should throw error if there is unregistered section', function() {
        var data;
        data = configuration.loadConfig(configuration.fileName);
        data.unregistered = {};
        expect(function() {
          return configuration.parse(data);
        }).to["throw"](Error);
        return delete data.unregistered;
      });
      return it('should return object with data of newly registered section', function() {
        var data;
        data = {
          parameters: {},
          newSection: {
            something: 'hello'
          }
        };
        configuration.addSection('newSection');
        expect(configuration.parse(data)).to.be.eql({
          files: [],
          parameters: {},
          sections: {
            newSection: {
              something: 'hello'
            }
          }
        });
        return configuration.removeExtension('newSection');
      });
    });
    describe('#load()', function() {
      return it('should return loaded configuration without parameters', function() {
        return expect(configuration.load()).to.be.eql({});
      });
    });
    return describe('#addSection()', function() {
      it('should return instance of newly registered section', function() {
        return expect(configuration.addSection('newSection')).to.be.an["instanceof"](Extension);
      });
      return it('should throw exception if section with reserved name is trying to register', function() {
        return expect(function() {
          configuration.addSection('includes');
          return configuration.addSection('parameters');
        }).to["throw"](Error);
      });
    });
  });

}).call(this);
