/** Generated by SimQ **/
/** modules **/

// Generated by CoffeeScript 1.6.3
(function() {
  var SUPPORTED, cache, modules, require, resolve, stats;

  if (!this.require) {
    SUPPORTED = ['js', 'json', 'ts', 'coffee', 'eco'];
    modules = {};
    stats = {};
    cache = {};
    require = function(name, parent) {
      var fullName, m;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof cache[fullName] === 'undefined') {
        m = {
          exports: {},
          id: fullName,
          filename: fullName,
          loaded: false,
          parent: null,
          children: null
        };
        modules[fullName].apply(modules[fullName], [m.exports, m]);
        m.loaded = true;
        cache[fullName] = m;
      }
      if (typeof stats[fullName] === 'undefined') {
        stats[fullName] = {
          atime: null,
          mtime: null,
          ctime: null
        };
      }
      stats[fullName].atime = new Date;
      return cache[fullName].exports;
    };
    resolve = function(name, parent) {
      var ext, num, part, parts, prev, result, _i, _j, _k, _len, _len1, _len2;
      if (parent == null) {
        parent = null;
      }
      if (parent !== null && name[0] === '.') {
        num = parent.lastIndexOf('/');
        if (num !== -1) {
          parent = parent.substr(0, num);
        }
        name = parent + '/' + name;
        parts = name.split('/');
        result = [];
        prev = null;
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          if (part === '.' || part === '') {
            continue;
          } else if (part === '..' && prev) {
            result.pop();
          } else {
            result.push(part);
          }
          prev = part;
        }
        name = result.join('/');
        if (parent[0] === '/') {
          name = '/' + name;
        }
      }
      if (typeof modules[name] !== 'undefined') {
        return name;
      }
      for (_j = 0, _len1 = SUPPORTED.length; _j < _len1; _j++) {
        ext = SUPPORTED[_j];
        if (typeof modules[name + '.' + ext] !== 'undefined') {
          return name + '.' + ext;
        }
      }
      for (_k = 0, _len2 = SUPPORTED.length; _k < _len2; _k++) {
        ext = SUPPORTED[_k];
        if (typeof modules[name + '/index.' + ext] !== 'undefined') {
          return name + '/index.' + ext;
        }
      }
      return null;
    };
    this.require = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return require(name, parent);
    };
    this.require.simq = true;
    this.require.version = 1;
    this.require.resolve = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return resolve(name, parent);
    };
    this.require.define = function(bundle) {
      var m, name, _results;
      _results = [];
      for (name in bundle) {
        m = bundle[name];
        _results.push(modules[name] = m);
      }
      return _results;
    };
    this.require.release = function() {
      var name, _results;
      _results = [];
      for (name in cache) {
        _results.push(delete cache[name]);
      }
      return _results;
    };
    this.require.getStats = function(name, parent) {
      var fullName;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof stats[fullName] === 'undefined') {
        stats[fullName] = {
          atime: null,
          mtime: null,
          ctime: null
        };
      }
      return stats[fullName];
    };
    this.require.__setStats = function(bundle) {
      var data, name, _results;
      _results = [];
      for (name in bundle) {
        data = bundle[name];
        _results.push(stats[name] = {
          atime: new Date(data.atime),
          mtime: new Date(data.mtime),
          ctime: new Date(data.ctime)
        });
      }
      return _results;
    };
    this.require.cache = cache;
  }

  return this.require.define;

}).call(this)({
 'recursive-merge/lib/Merge.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'recursive-merge/lib/Merge.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'recursive-merge/lib/Merge.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'recursive-merge/lib/Merge.js';
	var __dirname = 'recursive-merge/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'recursive-merge/lib/Merge.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var merge,
	    __slice = [].slice;
	
	  merge = function(left, right) {
	    var i, leftType, name, rightType, type, value, valueType, _i, _len;
	    type = Object.prototype.toString;
	    leftType = type.call(left);
	    rightType = type.call(right);
	    if (leftType !== rightType) {
	      throw new Error('Can not merge ' + leftType + ' with ' + rightType);
	    }
	    switch (leftType) {
	      case '[object Array]':
	        for (i = _i = 0, _len = right.length; _i < _len; i = ++_i) {
	          value = right[i];
	          valueType = type.call(value);
	          if (valueType === '[object Array]' || valueType === '[object Object]') {
	            left[i] = merge(left[i], value);
	          } else {
	            left.push(value);
	          }
	        }
	        break;
	      case '[object Object]':
	        for (name in right) {
	          value = right[name];
	          valueType = type.call(value);
	          if (typeof left[name] === 'undefined') {
	            left[name] = value;
	          } else if (valueType === '[object Array]' || valueType === '[object Object]') {
	            left[name] = merge(left[name], value);
	          }
	        }
	        break;
	      default:
	        throw new Error('Can not merge ' + leftType + ' objects');
	    }
	    return left;
	  };
	
	  module.exports = function() {
	    var left, r, right, _i, _len;
	    left = arguments[0], right = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
	    for (_i = 0, _len = right.length; _i < _len; _i++) {
	      r = right[_i];
	      left = merge(left, r);
	    }
	    return left;
	  };
	
	}).call(this);
	

}, 'clone/clone.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'clone/clone.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'clone/clone.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'clone/clone.js';
	var __dirname = 'clone';
	var process = {cwd: function() {return '/';}, argv: ['node', 'clone/clone.js'], env: {}};

	/** code **/
	"use strict";
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	var util = {
	  isArray: function (ar) {
	    return Array.isArray(ar) || (typeof ar === 'object' && objectToString(ar) === '[object Array]');
	  },
	  isDate: function (d) {
	    return typeof d === 'object' && objectToString(d) === '[object Date]';
	  },
	  isRegExp: function (re) {
	    return typeof re === 'object' && objectToString(re) === '[object RegExp]';
	  },
	  getRegExpFlags: function (re) {
	    var flags = '';
	    re.global && (flags += 'g');
	    re.ignoreCase && (flags += 'i');
	    re.multiline && (flags += 'm');
	    return flags;
	  }
	};
	
	if (typeof module === 'object')
	  module.exports = clone;
	
	/**
	 * Clones (copies) an Object using deep copying.
	 *
	 * This function supports circular references by default, but if you are certain
	 * there are no circular references in your object, you can save some CPU time
	 * by calling clone(obj, false).
	 *
	 * Caution: if `circular` is false and `parent` contains circular references,
	 * your program may enter an infinite loop and crash.
	 *
	 * @param `parent` - the object to be cloned
	 * @param `circular` - set to true if the object to be cloned may contain
	 *    circular references. (optional - true by default)
	*/
	function clone(parent, circular) {
	  if (typeof circular == 'undefined')
	    circular = true;
	
	  var useBuffer = typeof Buffer != 'undefined';
	
	  var circularParent = {};
	  var circularResolved = {};
	  var circularReplace = [];
	
	  function _clone(parent, context, child, cIndex) {
	    var i; // Use local context within this function
	    // Deep clone all properties of parent into child
	    if (typeof parent == 'object') {
	      if (parent == null)
	        return parent;
	      // Check for circular references
	      for(i in circularParent)
	        if (circularParent[i] === parent) {
	          // We found a circular reference
	          circularReplace.push({'resolveTo': i, 'child': child, 'i': cIndex});
	          return null; //Just return null for now...
	          // we will resolve circular references later
	        }
	
	      // Add to list of all parent objects
	      circularParent[context] = parent;
	      // Now continue cloning...
	      if (util.isArray(parent)) {
	        child = [];
	        for(i in parent)
	          child[i] = _clone(parent[i], context + '[' + i + ']', child, i);
	      }
	      else if (util.isDate(parent))
	        child = new Date(parent.getTime());
	      else if (util.isRegExp(parent)) {
	        child = new RegExp(parent.source, util.getRegExpFlags(parent));
	        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
	      } else if (useBuffer && Buffer.isBuffer(parent))
	      {
	        child = new Buffer(parent.length);
	        parent.copy(child);
	      }
	      else {
	        child = {};
	
	        // Also copy prototype over to new cloned object
	        child.__proto__ = parent.__proto__;
	        for(i in parent)
	          child[i] = _clone(parent[i], context + '[' + i + ']', child, i);
	      }
	
	      // Add to list of all cloned objects
	      circularResolved[context] = child;
	    }
	    else
	      child = parent; //Just a simple shallow copy will do
	    return child;
	  }
	
	  var i;
	  if (circular) {
	    var cloned = _clone(parent, '*');
	
	    // Now this object has been cloned. Let's check to see if there are any
	    // circular references for it
	    for(i in circularReplace) {
	      var c = circularReplace[i];
	      if (c && c.child && c.i in c.child) {
	        c.child[c.i] = circularResolved[c.resolveTo];
	      }
	    }
	    return cloned;
	  } else {
	    // Deep clone all properties of parent into child
	    var child;
	    if (typeof parent == 'object') {
	      if (parent == null)
	        return parent;
	      if (parent.constructor.name === 'Array') {
	        child = [];
	        for(i in parent)
	          child[i] = clone(parent[i], circular);
	      }
	      else if (util.isDate(parent))
	        child = new Date(parent.getTime() );
	      else if (util.isRegExp(parent)) {
	        child = new RegExp(parent.source, util.getRegExpFlags(parent));
	        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
	      } else {
	        child = {};
	        child.__proto__ = parent.__proto__;
	        for(i in parent)
	          child[i] = clone(parent[i], circular);
	      }
	    }
	    else
	      child = parent; // Just a simple shallow clone will do
	    return child;
	  }
	}
	
	/**
	 * Simple flat clone using prototype, accepts only objects, usefull for property
	 * override on FLAT configuration object (no nested props).
	 *
	 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
	 * works.
	 */
	clone.clonePrototype = function(parent) {
	  if (parent === null)
	    return null;
	
	  var c = function () {};
	  c.prototype = parent;
	  return new c();
	};
	

}, '/lib/Extension.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/Extension.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/Extension.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/Extension.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/Extension.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Extension;
	
	  Extension = (function() {
	    function Extension() {}
	
	    Extension.prototype.configurator = null;
	
	    Extension.prototype.data = null;
	
	    Extension.prototype.getConfig = function(defaults) {
	      if (defaults == null) {
	        defaults = null;
	      }
	      if (this.data === null) {
	        this.configurator.load();
	      }
	      if (defaults !== null) {
	        this.data = this.configurator.merge(this.data, defaults);
	      }
	      return this.data;
	    };
	
	    Extension.prototype.loadConfiguration = function() {
	      return this.getConfig();
	    };
	
	    Extension.prototype.afterCompile = function(data) {
	      return data;
	    };
	
	    return Extension;
	
	  })();
	
	  module.exports = Extension;
	
	}).call(this);
	

}, '/lib/Helpers.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/Helpers.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/Helpers.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/Helpers.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/Helpers.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Helpers, merge;
	
	  merge = require('recursive-merge');
	
	  Helpers = (function() {
	    function Helpers() {}
	
	    Helpers.dirName = function(path) {
	      var num;
	      num = path.lastIndexOf('/');
	      return path.substr(0, num);
	    };
	
	    Helpers.normalizePath = function(path) {
	      var part, parts, prev, result, _i, _len;
	      parts = path.split('/');
	      result = [];
	      prev = null;
	      for (_i = 0, _len = parts.length; _i < _len; _i++) {
	        part = parts[_i];
	        if (part === '.' || part === '') {
	          continue;
	        } else if (part === '..' && prev) {
	          result.pop();
	        } else {
	          result.push(part);
	        }
	        prev = part;
	      }
	      return '/' + result.join('/');
	    };
	
	    Helpers.arrayIndexOf = function(array, search) {
	      var element, i, _i, _len;
	      if (typeof Array.prototype.indexOf !== 'undefined') {
	        return array.indexOf(search);
	      }
	      if (array.length === 0) {
	        return -1;
	      }
	      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
	        element = array[i];
	        if (element === search) {
	          return i;
	        }
	      }
	      return -1;
	    };
	
	    return Helpers;
	
	  })();
	
	  module.exports = Helpers;
	
	}).call(this);
	

}, '/lib/EasyConfiguration.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/EasyConfiguration.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/EasyConfiguration.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/EasyConfiguration.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/EasyConfiguration.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var EasyConfiguration, Extension, Helpers, clone, merge;
	
	  merge = require('recursive-merge');
	
	  clone = require('clone');
	
	  Extension = require('./Extension');
	
	  Helpers = require('./Helpers');
	
	  EasyConfiguration = (function() {
	    EasyConfiguration.prototype.fileName = null;
	
	    EasyConfiguration.prototype.reserved = ['includes', 'parameters'];
	
	    EasyConfiguration.prototype.extensions = null;
	
	    EasyConfiguration.prototype.files = null;
	
	    EasyConfiguration.prototype._parameters = null;
	
	    EasyConfiguration.prototype.parameters = null;
	
	    EasyConfiguration.prototype.data = null;
	
	    function EasyConfiguration(fileName) {
	      this.fileName = fileName;
	      this.extensions = {};
	      this.files = [];
	      this._parameters = {};
	      this.parameters = {};
	    }
	
	    EasyConfiguration.prototype.addSection = function(name) {
	      return this.addExtension(name, new Extension);
	    };
	
	    EasyConfiguration.prototype.addExtension = function(name, extension) {
	      if (Helpers.arrayIndexOf(this.reserved, name) !== -1) {
	        throw new Error('Extension\'s name ' + name + ' is reserved.');
	      }
	      extension.configurator = this;
	      this.extensions[name] = extension;
	      return this.extensions[name];
	    };
	
	    EasyConfiguration.prototype.removeExtension = function(name) {
	      if (typeof this.extensions[name] === 'undefined') {
	        throw new Error('Extension with name ' + name + ' was not found.');
	      }
	      delete this.extensions[name];
	      this.invalidate();
	      return this;
	    };
	
	    EasyConfiguration.prototype.invalidate = function() {
	      this.data = null;
	      return this;
	    };
	
	    EasyConfiguration.prototype.load = function() {
	      var config, data;
	      if (this.data === null) {
	        config = this.loadConfig(this.fileName);
	        data = this.parse(config);
	        this.files = data.files;
	        this.parameters = data.parameters;
	        this.data = data.sections;
	      }
	      return this.data;
	    };
	
	    EasyConfiguration.prototype.loadConfig = function(file) {
	      var data, include, path, _i, _len, _ref;
	      data = require(file);
	      data = clone(data, false);
	      if (typeof data.includes !== 'undefined') {
	        _ref = data.includes;
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          include = _ref[_i];
	          path = Helpers.normalizePath(Helpers.dirName(file) + '/' + include);
	          data = this.merge(data, this.loadConfig(path));
	        }
	      }
	      return data;
	    };
	
	    EasyConfiguration.prototype.parse = function(data) {
	      var name, result, section, sections, _ref;
	      result = {
	        files: [],
	        parameters: {},
	        sections: {}
	      };
	      if (typeof data.includes !== 'undefined') {
	        result.files = data.includes;
	      }
	      if (typeof data.parameters !== 'undefined') {
	        this._parameters = data.parameters;
	        result.parameters = this.expandParameters(data.parameters);
	      }
	      _ref = this.extensions;
	      for (name in _ref) {
	        section = _ref[name];
	        if (typeof data[name] === 'undefined') {
	          data[name] = {};
	        }
	      }
	      sections = data;
	      if (typeof sections.parameters !== 'undefined') {
	        delete sections.parameters;
	      }
	      if (typeof sections.includes !== 'undefined') {
	        delete sections.includes;
	      }
	      for (name in sections) {
	        section = sections[name];
	        if (sections.hasOwnProperty(name) && (name !== '__proto__')) {
	          if (typeof this.extensions[name] === 'undefined') {
	            throw new Error('Found section ' + name + ' but there is no coresponding extension.');
	          }
	          this.extensions[name].data = section;
	          section = this.extensions[name].loadConfiguration();
	          section = this.expandParameters(section);
	          section = this.extensions[name].afterCompile(section);
	          result.sections[name] = section;
	        }
	      }
	      return result;
	    };
	
	    EasyConfiguration.prototype.expandParameters = function(parameters) {
	      var name, param, parse, type, _i, _len, _type,
	        _this = this;
	      _type = Object.prototype.toString;
	      parse = function(name, param) {
	        switch (_type.call(param)) {
	          case '[object String]':
	            return parameters[name] = param.replace(/%([a-zA-Z.-_]+)%/g, function(match, variable) {
	              return _this.getParameter(variable);
	            });
	          case '[object Object]':
	          case '[object Array]':
	            return parameters[name] = _this.expandParameters(param);
	          default:
	            return parameters[name] = param;
	        }
	      };
	      type = _type.call(parameters);
	      switch (type) {
	        case '[object Object]':
	          for (name in parameters) {
	            param = parameters[name];
	            parse(name, param);
	          }
	          break;
	        case '[object Array]':
	          for (name = _i = 0, _len = parameters.length; _i < _len; name = ++_i) {
	            param = parameters[name];
	            parse(name, param);
	          }
	          break;
	        default:
	          throw new Error("Can not parse " + type + " parameters.");
	      }
	      return parameters;
	    };
	
	    EasyConfiguration.prototype.getParameter = function(parameter) {
	      var actual, part, parts, _i, _len;
	      parts = parameter.split('.');
	      actual = this._parameters;
	      for (_i = 0, _len = parts.length; _i < _len; _i++) {
	        part = parts[_i];
	        if (typeof actual[part] === 'undefined') {
	          throw new Error("Parameter " + parameter + " is not defined.");
	        }
	        actual = actual[part];
	      }
	      return actual;
	    };
	
	    EasyConfiguration.prototype.merge = function(left, right) {
	      right = clone(right, false);
	      return merge(left, right);
	    };
	
	    return EasyConfiguration;
	
	  })();
	
	  module.exports = EasyConfiguration;
	
	}).call(this);
	

}, '/lib/shims.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/shims.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/shims.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/shims.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/shims.js'], env: {}};

	/** code **/
	if (!Array.prototype.indexOf) {
		Array.prototype.indexOf = function (searchElement , fromIndex) {
			var i,
				pivot = (fromIndex) ? fromIndex : 0,
				length;
	
			if (!this) {
				throw new TypeError();
			}
	
			length = this.length;
	
			if (length === 0 || pivot >= length) {
				return -1;
			}
	
			if (pivot < 0) {
				pivot = length - Math.abs(pivot);
			}
	
			for (i = pivot; i < length; i++) {
				if (this[i] === searchElement) {
					return i;
				}
			}
			return -1;
		};
	}

}, '/test/browser/tests/EasyConfiguration.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/browser/tests/EasyConfiguration.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/browser/tests/EasyConfiguration.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/browser/tests/EasyConfiguration.coffee';
	var __dirname = '/test/browser/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/browser/tests/EasyConfiguration.coffee'], env: {}};

	/** code **/
	(function() {
	  var EasyConfiguration, Extension, configuration, dir;
	
	  EasyConfiguration = require('/lib/EasyConfiguration');
	
	  Extension = require('/lib/Extension');
	
	  dir = '/test/data';
	
	  configuration = null;
	
	  describe('EasyConfiguration', function() {
	    beforeEach(function() {
	      return configuration = new EasyConfiguration("" + dir + "/config.json");
	    });
	    describe('#load()', function() {
	      return it('should return loaded configuration without parameters', function() {
	        return expect(configuration.load()).to.be.eql({});
	      });
	    });
	    describe('#addSection()', function() {
	      it('should return instance of newly registered section', function() {
	        return expect(configuration.addSection('newSection')).to.be.an["instanceof"](Extension);
	      });
	      return it('should throw exception if section with reserved name is trying to register', function() {
	        return expect(function() {
	          configuration.addSection('includes');
	          return configuration.addSection('parameters');
	        }).to["throw"](Error);
	      });
	    });
	    describe('#getParameter()', function() {
	      beforeEach(function() {
	        return configuration.load();
	      });
	      it('should throw an error for unknown parameter', function() {
	        return expect(function() {
	          return configuration.getParameter('unknown');
	        }).to["throw"](Error, 'Parameter unknown is not defined.');
	      });
	      it('should return parameter', function() {
	        return expect(configuration.getParameter('base')).to.be.equal('./www');
	      });
	      it('should return parameter from not first depth', function() {
	        return expect(configuration.getParameter('paths.cdn')).to.be.equal('./cdn/data');
	      });
	      it('should return parameter pointing to other parameter', function() {
	        expect(configuration.getParameter('paths.lang')).to.be.equal('./www/lang');
	        return expect(configuration.getParameter('paths.translator')).to.be.equal('./www/lang/translator.js');
	      });
	      return it('should return parameter pointing to other parameter from included file', function() {
	        return expect(configuration.getParameter('paths.videos')).to.be.equal('./www/videos');
	      });
	    });
	    return describe('sections', function() {
	      it('should throw an error for unknown section', function() {
	        configuration = new EasyConfiguration("" + dir + "/unknownSection");
	        return expect(function() {
	          return configuration.load();
	        }).to["throw"](Error, 'Found section unknown but there is no coresponding extension.');
	      });
	      it('should load data of section', function() {
	        configuration = new EasyConfiguration("" + dir + "/advanced");
	        configuration.addSection('application');
	        return expect(configuration.load()).to.be.eql({
	          application: {
	            path: './www',
	            data: ['./cdn/data', './www/lang', './www/lang/translator.js', './www/images', './www/videos']
	          }
	        });
	      });
	      return it('should load data from section with defaults', function() {
	        var section;
	        configuration = new EasyConfiguration("" + dir + "/advanced");
	        section = configuration.addSection('application');
	        section.loadConfiguration = function() {
	          var config, i, _i, _len, _path, _ref;
	          config = this.getConfig({
	            data: [],
	            run: true,
	            cache: '%base%/temp/cache'
	          });
	          _ref = config.data;
	          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
	            _path = _ref[i];
	            config.data[i] = {
	              path: _path
	            };
	          }
	          return config;
	        };
	        return expect(configuration.load()).to.be.eql({
	          application: {
	            path: './www',
	            data: [
	              {
	                path: './cdn/data'
	              }, {
	                path: './www/lang'
	              }, {
	                path: './www/lang/translator.js'
	              }, {
	                path: './www/images'
	              }, {
	                path: './www/videos'
	              }
	            ],
	            run: true,
	            cache: './www/temp/cache'
	          }
	        });
	      });
	    });
	  });
	
	}).call(this);
	

}, '/test/browser/tests/Helpers.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/browser/tests/Helpers.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/browser/tests/Helpers.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/browser/tests/Helpers.coffee';
	var __dirname = '/test/browser/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/browser/tests/Helpers.coffee'], env: {}};

	/** code **/
	(function() {
	  var Helpers;
	
	  Helpers = require('/lib/Helpers');
	
	  describe('Helpers', function() {
	    describe('#dirName()', function() {
	      return it('should return name of file\'s directory', function() {
	        return expect(Helpers.dirName('/var/www/data/something.js')).to.be.equal('/var/www/data');
	      });
	    });
	    return describe('#normalizePath()', function() {
	      return it('should return normalized and resolved path', function() {
	        return expect(Helpers.normalizePath('/var/www/../www/data/././../../www/data/something.js')).to.be.equal('/var/www/data/something.js');
	      });
	    });
	  });
	
	}).call(this);
	

}, '/test/data/advanced.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/data/advanced.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/data/advanced.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/data/advanced.json';
	var __dirname = '/test/data';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/data/advanced.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"includes": [
			"./config.json"
		],
		"application": {
			"path": "%base%",
			"data": [
				"%paths.cdn%",
				"%paths.lang%",
				"%paths.translator%",
				"%paths.images%",
				"%paths.videos%"
			]
		}
	}
	}).call(this);
	

}, '/test/data/config.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/data/config.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/data/config.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/data/config.json';
	var __dirname = '/test/data';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/data/config.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"includes": [
			"./other.json"
		],
		"parameters": {
			"base": "./www",
			"paths": {
				"cdn": "./cdn/data",
				"lang": "%base%/lang",
				"translator": "%paths.lang%/translator.js",
				"images": "%base%/images"
			},
			"cached": [
				"%paths.translator%"
			]
		}
	}
	}).call(this);
	

}, '/test/data/other.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/data/other.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/data/other.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/data/other.json';
	var __dirname = '/test/data';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/data/other.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"parameters": {
			"paths": {
				"videos": "%base%/videos"
			}
		}
	}
	}).call(this);
	

}, '/test/data/unknownSection.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/data/unknownSection.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/data/unknownSection.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/data/unknownSection.json';
	var __dirname = '/test/data';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/data/unknownSection.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"unknown": {
	
		}
	}
	}).call(this);
	

}, '/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/package.json';
	var __dirname = '/';
	var process = {cwd: function() {return '/';}, argv: ['node', '/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"name": "easy-configuration",
		"description": "Simply extensible loader for json config files",
		"version": "1.6.0",
		"author": {
			"name": "David Kudera",
			"email": "sakren@gmail.com"
		},
		"keywords": [
			"config",
			"configurator",
			"configuration",
			"setup",
			"settings",
			"json"
		],
		"repository": {
			"type": "git",
			"url": "git@github.com:sakren/node-easy-configuration.git"
		},
		"license": "MIT",
		"engines": {
			"node": "*"
		},
		"main": "./lib/EasyConfiguration.js",
		"dependencies": {
			"recursive-merge": "~1.0.0",
			"clone": "~0.1.10"
		},
		"devDependencies": {
			"chai": "~1.8.0",
			"mocha": "~1.14.0"
		},
		"scripts": {
			"test": "cd ./test; echo \"Testing in node:\"; mocha ./node/index.js --reporter spec; cd ./browser; echo \"Testing in browser:\"; simq build; mocha-phantomjs ./index.html;"
		}
	}
	}).call(this);
	

}, 'recursive-merge/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'recursive-merge/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'recursive-merge/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'recursive-merge/package.json';
	var __dirname = 'recursive-merge';
	var process = {cwd: function() {return '/';}, argv: ['node', 'recursive-merge/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "recursive-merge",
	  "description": "Recursive merge tool for arrays and objects",
	  "version": "1.0.0",
	  "author": {
	    "name": "David Kudera",
	    "email": "sakren@gmail.com"
	  },
	  "keywords": [
	    "merge",
	    "recursive",
	    "browser",
	    "array",
	    "object"
	  ],
	  "license": "MIT",
	  "repository": {
	    "type": "git",
	    "url": "git@github.com:sakren/node-recursive-merge.git"
	  },
	  "engines": {
	    "node": "*"
	  },
	  "main": "./lib/Merge.js",
	  "devDependencies": {
	    "should": "1.2.2"
	  },
	  "scripts": {
	    "test": "cd ./test; mocha ./index.js;"
	  },
	  "readme": "# Recursive merge\n\nRecursive merge tool for arrays and objects\n\n## Changelog\n\nChangelog is in the bottom of this readme.\n\n## Usage\n\nWith this tool, you can recursivelly merge arrays or objects.\n\n```\nvar merge = require('merge');\n\nvar result = merge(\n\t[1, 1, 2, 3],\n\t[3, 4, 4, 5],\n\t[10, 9, 8, 1]\n);\t\t\t\t// result: [1, 1, 2, 3, 3, 4, 4, 5, 10, 9, 8, 1]\n```\n\nAs you can see, this library just merging objects and not removing duplicates.\n\nYou should also know, that this affects first object passed to merge function. Overy other objects (arrays, objects) are\nadded to the first one. There is not any fast simple and universal solution for cloning objects (arrays yes).\n\nIn the same way, you can merge also objects.\n\nIf you will try to merge two different types of objects, exception will be thrown. Also if you will try to merge other\nobjects than arrays or objects, exception will be also thrown.\n\n## Changelog\n\n* 1.0.0\n\t+ Initial first version",
	  "readmeFilename": "README.md",
	  "bugs": {
	    "url": "https://github.com/sakren/node-recursive-merge/issues"
	  },
	  "homepage": "https://github.com/sakren/node-recursive-merge",
	  "_id": "recursive-merge@1.0.0",
	  "_from": "recursive-merge@~1.0.0"
	}
	
	}).call(this);
	

}, 'clone/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'clone/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'clone/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'clone/package.json';
	var __dirname = 'clone';
	var process = {cwd: function() {return '/';}, argv: ['node', 'clone/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "clone",
	  "description": "deep cloning of objects and arrays",
	  "tags": [
	    "clone",
	    "object",
	    "array",
	    "function",
	    "date"
	  ],
	  "version": "0.1.11",
	  "repository": {
	    "type": "git",
	    "url": "git://github.com/pvorb/node-clone.git"
	  },
	  "bugs": {
	    "url": "https://github.com/pvorb/node-clone/issues"
	  },
	  "main": "clone.js",
	  "author": {
	    "name": "Paul Vorbach",
	    "email": "paul@vorb.de",
	    "url": "http://vorb.de"
	  },
	  "contributors": [
	    {
	      "name": "Blake Miner",
	      "email": "miner.blake@gmail.com",
	      "url": "http://www.blakeminer.com/"
	    },
	    {
	      "name": "Tian You",
	      "email": "axqd001@gmail.com",
	      "url": "http://blog.axqd.net/"
	    },
	    {
	      "name": "George Stagas",
	      "email": "gstagas@gmail.com",
	      "url": "http://stagas.com/"
	    },
	    {
	      "name": "Tobiasz Cudnik",
	      "email": "tobiasz.cudnik@gmail.com",
	      "url": "https://github.com/TobiaszCudnik"
	    },
	    {
	      "name": "Pavel Lang",
	      "email": "langpavel@phpskelet.org",
	      "url": "https://github.com/langpavel"
	    },
	    {
	      "name": "Dan MacTough",
	      "url": "http://yabfog.com/"
	    },
	    {
	      "name": "w1nk",
	      "url": "https://github.com/w1nk"
	    },
	    {
	      "name": "Hugh Kennedy",
	      "url": "http://twitter.com/hughskennedy"
	    },
	    {
	      "name": "Dustin Diaz",
	      "url": "http://dustindiaz.com"
	    },
	    {
	      "name": "Ilya Shaisultanov",
	      "url": "https://github.com/diversario"
	    }
	  ],
	  "engines": {
	    "node": "*"
	  },
	  "dependencies": {},
	  "devDependencies": {
	    "underscore": "*",
	    "nodeunit": "*"
	  },
	  "optionalDependencies": {},
	  "scripts": {
	    "test": "nodeunit test.js"
	  },
	  "readme": "# clone\n\n[![build status](https://secure.travis-ci.org/pvorb/node-clone.png)](http://travis-ci.org/pvorb/node-clone)\n\noffers foolproof _deep cloning_ of variables in JavaScript.\n\n\n## Installation\n\n    npm install clone\n\nor\n\n    ender build clone\n\n\n## Example\n\n~~~ javascript\nvar clone = require('clone');\n\nvar a, b;\n\na = { foo: { bar: 'baz' } };  // inital value of a\n\nb = clone(a);                 // clone a -> b\na.foo.bar = 'foo';            // change a\n\nconsole.log(a);               // show a\nconsole.log(b);               // show b\n~~~\n\nThis will print:\n\n~~~ javascript\n{ foo: { bar: 'foo' } }\n{ foo: { bar: 'baz' } }\n~~~\n\n**clone** masters cloning simple objects (even with custom prototype), arrays,\nDate objects, and RegExp objects. Everything is cloned recursively, so that you\ncan clone dates in arrays in objects, for example.\n\n\n## API\n\n`clone(val, circular)`\n\n  * `val` -- the value that you want to clone, any type allowed\n  * `circular` -- boolean\n\n    Call `clone` with `circular` set to `false` if you are certain that `obj`\n    contains no circular references. This will give better performance if needed.\n    There is no error if `undefined` or `null` is passed as `obj`.\n\n`clone.clonePrototype(obj)`\n\n  * `obj` -- the object that you want to clone\n\nDoes a prototype clone as\n[described by Oran Looney](http://oranlooney.com/functional-javascript/).\n\n\n## Circular References\n\n~~~ javascript\nvar a, b;\n\na = { hello: 'world' };\n\na.myself = a;\nb = clone(a);\n\nconsole.log(b);\n~~~\n\nThis will print:\n\n~~~ javascript\n{ hello: \"world\", myself: [Circular] }\n~~~\n\nSo, `b.myself` points to `b`, not `a`. Neat!\n\n\n## Test\n\n    npm test\n\n\n## Caveat\n\nSome special objects like a socket or `process.stdout`/`stderr` are known to not\nbe cloneable. If you find other objects that cannot be cloned, please [open an\nissue](https://github.com/pvorb/node-clone/issues/new).\n\n\n## Bugs and Issues\n\nIf you encounter any bugs or issues, feel free to\n[open an issue at github](https://github.com/pvorb/node-clone/issues) or send me\nan email to <paul@vorb.de>. I also always like to hear from you, if you’re using\nmy code.\n\n## License\n\nCopyright © 2011-2013 Paul Vorbach\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the “Software”), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
	  "readmeFilename": "README.md",
	  "homepage": "https://github.com/pvorb/node-clone",
	  "_id": "clone@0.1.11",
	  "_from": "clone@~0.1.10"
	}
	
	}).call(this);
	

}, 'recursive-merge': function(exports, module) { module.exports = window.require('recursive-merge/lib/Merge.js'); }
, 'clone': function(exports, module) { module.exports = window.require('clone/clone.js'); }

});
require.__setStats({"recursive-merge/lib/Merge.js":{"atime":1385285416000,"mtime":1375346181000,"ctime":1385285362000},"clone/clone.js":{"atime":1385285415000,"mtime":1381937894000,"ctime":1385285362000},"/lib/Extension.js":{"atime":1385285413000,"mtime":1385285378000,"ctime":1385285378000},"/lib/Helpers.js":{"atime":1385287074000,"mtime":1385287073000,"ctime":1385287073000},"/lib/EasyConfiguration.js":{"atime":1385287034000,"mtime":1385287027000,"ctime":1385287027000},"/lib/shims.js":{"atime":1385285413000,"mtime":1385285347000,"ctime":1385285347000},"/test/browser/tests/EasyConfiguration.coffee":{"atime":1385286543000,"mtime":1385286541000,"ctime":1385286541000},"/test/browser/tests/Helpers.coffee":{"atime":1385286296000,"mtime":1385286075000,"ctime":1385286075000},"/test/data/advanced.json":{"atime":1385285413000,"mtime":1385285347000,"ctime":1385285347000},"/test/data/config.json":{"atime":1385285413000,"mtime":1385285347000,"ctime":1385285347000},"/test/data/other.json":{"atime":1385285413000,"mtime":1385285347000,"ctime":1385285347000},"/test/data/unknownSection.json":{"atime":1385285413000,"mtime":1385285347000,"ctime":1385285347000},"/package.json":{"atime":1385287049000,"mtime":1385287044000,"ctime":1385287044000},"recursive-merge/package.json":{"atime":1385285416000,"mtime":1385285362000,"ctime":1385285362000},"clone/package.json":{"atime":1385285415000,"mtime":1385285362000,"ctime":1385285362000}});
require.version = '5.1.2';

/** run section **/

/** /test/browser/tests/EasyConfiguration.coffee **/
require('/test/browser/tests/EasyConfiguration.coffee');

/** /test/browser/tests/Helpers.coffee **/
require('/test/browser/tests/Helpers.coffee');