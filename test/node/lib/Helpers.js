// Generated by CoffeeScript 1.6.3
(function() {
  var Helpers, dir, expect, fs, path;

  expect = require('chai').expect;

  path = require('path');

  fs = require('fs');

  Helpers = require('../../../lib/Helpers');

  dir = path.normalize(__dirname + '/../../data');

  describe('Helpers', function() {
    describe('#dirName()', function() {
      return it('should return name of file\'s directory', function() {
        return expect(Helpers.dirName('/var/www/data/something.js')).to.be.equal('/var/www/data');
      });
    });
    describe('#normalizePath()', function() {
      return it('should return normalized and resolved path', function() {
        return expect(Helpers.normalizePath('/var/www/../www/data/././../../www/data/something.js')).to.be.equal('/var/www/data/something.js');
      });
    });
    describe('#arrayIndexOf()', function() {
      it('should return index of needed item', function() {
        return expect(Helpers.arrayIndexOf(['one', 'two', 'three', 'four', 'five'], 'four')).to.be.equal(3);
      });
      return it('should return minus one for not found item', function() {
        return expect(Helpers.arrayIndexOf(['one'], 'two')).to.be.equal(-1);
      });
    });
    return describe('#clone()', function() {
      it('should clone array', function() {
        var cloned, original;
        original = ['one', 'two', 'three', 'four', 'five'];
        cloned = Helpers.clone(original);
        return expect(cloned).to.be.eql(['one', 'two', 'three', 'four', 'five']).and.not.equal(original);
      });
      it('should clone object', function() {
        var cloned, original;
        original = {
          one: 'one',
          two: 'two',
          three: 'three',
          four: 'four',
          five: 'five'
        };
        cloned = Helpers.clone(original);
        expect(cloned).to.be.eql({
          one: 'one',
          two: 'two',
          three: 'three',
          four: 'four',
          five: 'five'
        }).and.not.equal(original);
        original.three = 'test';
        return expect(cloned.three).to.be.equal('three');
      });
      return it('should clone advanced object', function() {
        var cloned, original;
        original = JSON.parse(fs.readFileSync(dir + '/advanced.json', {
          encoding: 'utf8'
        }));
        cloned = Helpers.clone(original);
        expect(cloned).to.be.eql({
          includes: ['./config.json'],
          application: {
            path: '%base%',
            data: ['%paths.cdn%', '%paths.lang%', '%paths.translator%', '%paths.images%', '%paths.videos%']
          }
        }).and.not.equal(original);
        original.application.path = '/app';
        return expect(cloned.application.path).to.be.equal('%base%');
      });
    });
  });

}).call(this);
