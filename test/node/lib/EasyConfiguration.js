// Generated by CoffeeScript 1.6.3
(function() {
  var EasyConfiguration, Extension, configuration, dir, expect, path;

  expect = require('chai').expect;

  path = require('path');

  EasyConfiguration = require('../../../lib/EasyConfiguration');

  Extension = require('../../../lib/Extension');

  dir = path.normalize(__dirname + '/../../data');

  configuration = null;

  describe('EasyConfiguration', function() {
    beforeEach(function() {
      return configuration = new EasyConfiguration("" + dir + "/config.json");
    });
    describe('#load()', function() {
      it('should return loaded configuration without parameters', function() {
        return expect(configuration.load()).to.be.eql({});
      });
      return it('should throw an error with information about circular reference', function() {
        configuration = new EasyConfiguration("" + dir + "/circular.json");
        return expect(function() {
          return configuration.load();
        }).to["throw"](Error, 'Found circular reference in parameters first, second, third, other.inner.fourth.');
      });
    });
    describe('#addSection()', function() {
      it('should return instance of newly registered section', function() {
        return expect(configuration.addSection('newSection')).to.be.an["instanceof"](Extension);
      });
      return it('should throw exception if section with reserved name is trying to register', function() {
        return expect(function() {
          configuration.addSection('includes');
          return configuration.addSection('parameters');
        }).to["throw"](Error);
      });
    });
    describe('#getParameter()', function() {
      beforeEach(function() {
        return configuration.load();
      });
      it('should throw an error for unknown parameter', function() {
        return expect(function() {
          return configuration.getParameter('unknown');
        }).to["throw"](Error, 'Parameter unknown is not defined.');
      });
      it('should return parameter', function() {
        return expect(configuration.getParameter('base')).to.be.equal('./www');
      });
      it('should return parameter from not first depth', function() {
        return expect(configuration.getParameter('paths.cdn')).to.be.equal('./cdn/data');
      });
      it('should return parameter pointing to other parameter', function() {
        expect(configuration.getParameter('paths.lang')).to.be.equal('./www/lang');
        return expect(configuration.getParameter('paths.translator')).to.be.equal('./www/lang/translator.js');
      });
      return it('should return parameter pointing to other parameter from included file', function() {
        return expect(configuration.getParameter('paths.videos')).to.be.equal('./www/videos');
      });
    });
    return describe('sections', function() {
      it('should throw an error for unknown section', function() {
        configuration = new EasyConfiguration("" + dir + "/unknownSection");
        return expect(function() {
          return configuration.load();
        }).to["throw"](Error, 'Found section unknown but there is no coresponding extension.');
      });
      it('should load data of section', function() {
        configuration = new EasyConfiguration("" + dir + "/advanced");
        configuration.addSection('application');
        return expect(configuration.load()).to.be.eql({
          application: {
            path: './www',
            data: ['./cdn/data', './www/lang', './www/lang/translator.js', './www/images', './www/videos']
          }
        });
      });
      return it('should load data from section with defaults', function() {
        var section;
        configuration = new EasyConfiguration("" + dir + "/advanced");
        section = configuration.addSection('application');
        section.loadConfiguration = function() {
          var config, i, _i, _len, _path, _ref;
          config = this.getConfig({
            data: [],
            run: true,
            favicon: null,
            cache: '%base%/temp/cache'
          });
          _ref = config.data;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            _path = _ref[i];
            config.data[i] = {
              path: _path
            };
          }
          return config;
        };
        return expect(configuration.load()).to.be.eql({
          application: {
            path: './www',
            data: [
              {
                path: './cdn/data'
              }, {
                path: './www/lang'
              }, {
                path: './www/lang/translator.js'
              }, {
                path: './www/images'
              }, {
                path: './www/videos'
              }
            ],
            run: true,
            favicon: null,
            cache: './www/temp/cache'
          }
        });
      });
    });
  });

}).call(this);
